{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "evHVxwk2JA-3"
   },
   "source": [
    "# <p style=\"text-align: center;\">MIS 382N: Advanced Machine Learning</p>\n",
    "# <p style=\"text-align: center;\">Homework 1</p>\n",
    "## <p style=\"text-align: center;\">Total points: 55</p>\n",
    "## <p style=\"text-align: center;\">Due: Friday, **Sep 10** submitted via Canvas by 11:59 pm</p>\n",
    "\n",
    "Your homework should be written in a **Jupyter notebook**. Please make sure your code runs and the graphics (and anything else) are displayed in your notebook before submitting (%matplotlib inline). **This can be an individual assignment or group of 2. If you choose to do it as a group, please specify who you are working with (name and EID), then only one student should submit the homework.**\n",
    "\n",
    "**Note: Notebooks MUST have the images embedded in them. There will be no regrades if attached images do not render in the notebook. Please re download from canvas after submission and make sure all attached images render without errors. (Hint: Image module from IPython.display)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "0eTfjKUv7_Yo"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TWWU_gOSLEEv"
   },
   "source": [
    "# Question 1: MLOps (10 pts)\n",
    "Read this [article](https://towardsdatascience.com/what-is-mlops-everything-you-must-know-to-get-started-523f2d0b8bd8) \"What is MLOps — Everything You Must Know to Get Started\", which gives a quick walkthrough of the machine learning development lifecycle and explains how MLOps come into play, or watch this [video](https://www.youtube.com/watch?v=06-AZXmwHjo) which you may find interesting.\n",
    "\n",
    "1. (**4 pts**) Use your own words to describe what MLOps is, and what challenges MLOps address. Limit your answer to one paragraph.\n",
    "\n",
    "2. (**6 pts**) Describe what the main phases in MLOps are. Your answer should be 2-3 paragraphs.\n",
    "\n",
    "\n",
    "## Answer:\n",
    "\n",
    "1. MLOps (short for Machine Learning Operations, also referred to as Model Ops) can be defined as an engineering discipline to unify Machine Learning Systems development as well as deployment so as to standardize and streamline the continous delivery of high-performing models in production. It requires involment of everyone: from top management to Data Engineers to Data Scienctist to DevOps and ML Engineers. MLOps addresses many challenges that come from building and deploying ML-based systems for large scale data. Shortage of Data Scientists that can develop and deploy scalable web applications can be served by new profile of ML Engineers working at the intersection of Data Science and DevOps. MLOps can also help in mitigating the communication gaps between the business and the technical team as well as help in maintaining performance standards of the model and ensuring AI governance. MLOps can also help to assess the risk/cost of the model and whether it would be suitable to use a blackbox ML/DL system for certain applications where the cost of inaccuracy might be high.\n",
    "\n",
    "\n",
    "2. MLOps has some key phases that can help to address the challenges posed by building and deploying ML-based systems for large scale data. Machine Learning Development usually starts with a business goal or objective. Thus, it is imperative to have the skills to translate the business objective into a ML problem. Once the objective has been translated into a machine learning problem, we need to start collecting necessary input data which can be a suitable input to the model. Next step is the data preparation stage which involves feature engineering, cleaning and then selecting the set of features that contribute to the output of the underlying problem. A pipeline needs to be designed for this choosing the right cloud services and architecture that is both performant and cost effective. \n",
    "   \n",
    "   Once the input data is prepared, we need to train our ML model. The best solution is found out using quantitative measures like recall, accuracy, precision etc as well as qualitative analysis of the model that is accounting for explainability of the model. The reproducability of the data also needs to be ensured by versioning our models and data. The model also needs to be checked against baselines, simpler models, and across different dimensions. The next step is building and automating the ML pipeline. For this, we need to identify the system requirements and  choose and appropriate cloud structure. Afterwards, we need to construct the training and testing pipelines as well as perform data validation. Once the pipeleines have been built, the model needs to be deloyed to the production system. The model can be deployed in the production system either as a static deployment or a dynamic deployment. Static deployment or embedded model is where the model is packaged into installable application software and then deployed. Dynamic deployment is where the model is deployed using a web framework like FastAPI or Flask and is offered as an API endpoint that responds to user requests. Once the model has been deployed in the production system, it needs to be monitored, optimized and mantained. It needs to be ensured that the models deliver on their responsibilities to all the stakeholders, employees, and users that are affected by them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wusA9L1LmUMH"
   },
   "source": [
    "# Question 2: Applications of Machine Learning (5 pts)\n",
    "Read this [article](https://builtin.com/data-science/data-science-applications-examples) \"17 Data Science Applications & Examples\" and pick one of the data science systems used by various organizations according to this blog. \n",
    "\n",
    "For this system you have chosen, answer the following questions. Please limit your answer to one paragraph:\n",
    "\n",
    "1. What kind of machine learning problem is involved (e.g. classification, regression, clustering, outlier detection,...) in this system?\n",
    "2. Speculate on what kind of data may be needed and how the results can be useful to the organization.\n",
    "3. What do you think are the ethical implications of using machine learning in a domain like this?\n",
    "\n",
    "## Answer:\n",
    "\n",
    "**Organization Chosen: E-Commerce**\n",
    "**System Chosen: SOVRN: AUTOMATED AD PLACEMENT**\n",
    "\n",
    "1. Machine Learning Problem Involved: Outlier Detection, Classification, Clustering, Convolutional Neural Networks \n",
    "\n",
    "\n",
    "2. Data that might be needed by Sovrn is user's previous search queries, activity, visit to sites or apps, demographic information, time spent on a particular post or website, location. This data can then be used by the company for targeted advertisements and campaigns.\n",
    "\n",
    "\n",
    "3. Ethical Implications: These targeted ads are clear examples of discrimination based on characteristics such as gender or race and are unethical. AI might learn of the basis of these variables thereby further reinforcing these stereotypes and further widening them. Storing such a huge amount of data in one place also undermines the privacy of the customers. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2w8za9lLmVO7"
   },
   "source": [
    "# Question 3: Simpson's Paradox (10 pts)\n",
    "A data scientist should be careful about drawing unwarranted conclusions about any data that is presented. One of the 'gotchas' that can happen even in apparently very simple tabular summaries, is called Simpson's paradox.\n",
    "\n",
    "Read this [article](https://www.covid-datascience.com/post/israeli-data-how-can-efficacy-vs-severe-disease-be-strong-when-60-of-hospitalized-are-vaccinated), which explains why the computed efficacy of the Pfizer vaccine is misleadingly low (67.5%) when you lump all people together, but once you stratify people by age (which is the right thing to do), you get much higher efficacy numbers.\n",
    "\n",
    "1.(**5 pts**) Explain in your own words what Simpson's paradox is, and how this 'paradox' can happen in real data.\n",
    "\n",
    "2.(**5 pts**) Find and mention another example of Simpson's paradox (but not any of the 3 examples given in the Wikipedia entry for 'Simpson's paradox'), state why the paradox appeared in your chosen example. Also give a reference (URL) to your source for the chosen example.\n",
    "\n",
    "## Answer:\n",
    "\n",
    "1. Simpson's paradox is a phenomenon in which a trend appears in several groups of data but disappears or reverses when the groups are combined. In case of Simpson's Paradox, the same data can be used to prove two opposing arguments depending on whether the data is aggregated or stratified. This result is often encountered in social-science and medical-science statistics. Simpson’s Paradox happens because disaggregation of the data or splitting it into subgroups can cause certain subgroups to have an imbalanced representation compared to other subgroups. This might be due to the relationship between the variables, or simply due to the way that the data has been partitioned into subgroups. Simpson’s Paradox is important because it reminds us that the data we are shown is not all the data there is. We can’t be satisfied only with the numbers or a figure: we have to consider the data generation process and the causal model responsible for the data.\n",
    "\n",
    "\n",
    "2. An interesting version of Simpson’s Paradox occurs when a correlation that points in one direction in stratified groups becomes a correlation in the opposite direction when aggregated for the population. Example:\n",
    "\n",
    "   Let's consider the data on the number of hours of exercise per week versus the risk of developing a disease for two sets of patients, those below the age of 50 and those over the age of 50. It clearly has a negative correlation, indicating that increased levels of exercise per week are correlated with a lower risk of developing the disease for both groups. But when we combine the data together on a single plot, we find that the correlation has completely reversed. This might make us conclude that exercise increases the risk of disease, the opposite of what we would say from the individual plots. This is what we call Simpson's Paradox. \n",
    "   \n",
    "   To avoid Simpson’s Paradox leading us to two opposite conclusions, we need to choose to segregate the data in groups or aggregate it together. There is a need to think causally: how was the data generated and based on this, what factors influence the results that we are not shown.\n",
    "   In this example, we intuitively know that exercise is not the only factor affecting the probability of developing a disease. There are other influences such as diet, environment, heredity and so forth. However, in the plots above, we see only probability versus hours of exercise. \n",
    "   In the data, there are two different causes of disease yet by aggregating the data and looking at only probability vs exercise, we ignore the second cause — age — completely. If we go ahead and plot probability vs age, we can see that the age of the patient is strongly positively correlated with disease probability.\n",
    "    As the patient increases in age, her/his risk of the disease increases which means older patients are more likely to develop the disease than younger patients even with the same amount of exercise. Therefore, to assess the effect of just exercise on disease, we would want to hold the age constant and change the amount of weekly exercise. Separating the data into groups is one way to do this, and doing so, we see that for a given age group, exercise decreases the risk of developing the disease. That is, controlling for the age of the patient, exercise is correlated with a lower risk of disease. Hence, by considering the data generating process and applying the causal model, we resolve Simpson’s Paradox by keeping the data stratified to control for an additional cause.\n",
    "\n",
    "    Reference: https://towardsdatascience.com/simpsons-paradox-how-to-prove-two-opposite-arguments-using-one-dataset-1c9c917f5ff9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gth0D8jiMBSe"
   },
   "source": [
    "# Question 4: Ridge and Lasso Regression (30 pts)\n",
    "\n",
    "Download the dataset **Admission.csv** from Canvas and use the following codes to import the Admission dataset in Python. \n",
    "\n",
    "There are 7 features in the dataset:\n",
    "\n",
    "1. GRE score\n",
    "2. TOEFL score\n",
    "3. University Rating\n",
    "4. SOP(Statement of Purpose)\n",
    "5. LOR(Letter of Recommendation)\n",
    "6. CGPA\n",
    "7. Research\n",
    "\n",
    "And the target is **Chance of Admission**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "QFazlpLgGpAa"
   },
   "outputs": [],
   "source": [
    "# Only use this code block if you are using Google Colab.\n",
    "# If you are using Jupyter Notebook, please ignore this code block. You can directly upload the file to your Jupyter Notebook file systems.\n",
    "#from google.colab import files\n",
    "\n",
    "## It will prompt you to select a local file. Click on “Choose Files” then select and upload the file. \n",
    "## Wait for the file to be 100% uploaded. You should see the name of the file once Colab has uploaded it.\n",
    "#uploaded = files.upload()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "xsPaOOehGuU6"
   },
   "outputs": [],
   "source": [
    "# Codes below will work for both Google Colab and Jupyter Notebook.\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "## Load the dataset into pandas DataFrame\n",
    "df = pd.read_csv('Admission.csv', index_col=0)\n",
    "df = df.replace([np.inf, -np.inf], np.nan) # \n",
    "df = df.fillna(0) # Replace all the NaN values with 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "PmMz72U6Gv-z"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR ', 'CGPA',\n",
       "       'Research', 'Chance_of_Admit'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns # Show you all the columns in this file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "CyZN-yFfGxlt"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GRE_Score</th>\n",
       "      <th>TOEFL_Score</th>\n",
       "      <th>University_Rating</th>\n",
       "      <th>SOP</th>\n",
       "      <th>LOR</th>\n",
       "      <th>CGPA</th>\n",
       "      <th>Research</th>\n",
       "      <th>Chance_of_Admit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Serial No.</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>337</td>\n",
       "      <td>118</td>\n",
       "      <td>4</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>9.65</td>\n",
       "      <td>1</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>324</td>\n",
       "      <td>107</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>8.87</td>\n",
       "      <td>1</td>\n",
       "      <td>0.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>316</td>\n",
       "      <td>104</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>8.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>322</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2.5</td>\n",
       "      <td>8.67</td>\n",
       "      <td>1</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>314</td>\n",
       "      <td>103</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>8.21</td>\n",
       "      <td>0</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            GRE_Score  TOEFL_Score  University_Rating  SOP  LOR   CGPA  \\\n",
       "Serial No.                                                               \n",
       "1                 337          118                  4  4.5   4.5  9.65   \n",
       "2                 324          107                  4  4.0   4.5  8.87   \n",
       "3                 316          104                  3  3.0   3.5  8.00   \n",
       "4                 322          110                  3  3.5   2.5  8.67   \n",
       "5                 314          103                  2  2.0   3.0  8.21   \n",
       "\n",
       "            Research  Chance_of_Admit  \n",
       "Serial No.                             \n",
       "1                  1             0.92  \n",
       "2                  1             0.76  \n",
       "3                  1             0.72  \n",
       "4                  1             0.80  \n",
       "5                  0             0.65  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head() # Show you the first 5 rows in this file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "S3TfR0i4G2rO"
   },
   "outputs": [],
   "source": [
    "y = df['Chance_of_Admit'] # The column named Chance_of_Admit is used as the target, and we store it in y\n",
    "X = df.drop(['Chance_of_Admit'], axis=1) # We keep the remaining columns as the features, and store them in x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pKq1KERxJw9y"
   },
   "source": [
    "1)(**2 pts**) Split the data into a training set(75% of data) and a test set(25% of data), using the [train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) function with random_state = 50. Then scale the data (not including target) so that each of the independent variables would have zero mean and unit variance. You can use the [sklearn.preprocessing.scale](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.scale.html) function for this. Print the first 5 rows of the training set after scaling.\n",
    "\n",
    "2)(**5 pts**) Use [sklearn.linear_model.Lasso](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html) and [sklearn.linear_model.Ridge](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html) classes to do a **5-fold** cross validation using sklearn's KFold. For the sweep of the regularization parameter, we will look at a grid of values ranging from α=10^10 to α=10^−6. In Python, you can consider this range of values as follows: alpha = 10**numpy.linspace(6,-6,100) \n",
    "so that you can generate 100 uniform values between -6 to 6 as power series.\n",
    "\n",
    "Fit the 2 regression models with scaled data and report the best chosen **α** based on cross validation as well as the corresponding scoring metric. The cross validation should happen on your training data using **MSE** as the scoring metric.\n",
    "\n",
    "3)(**5 pts**) Run ridge and lasso regression for all of the **α** specified above (on training data), and plot the coefficients learned for each of them - there should be one plot each for lasso and ridge, so a total of two plots; different features' weights of each model should be on the same plot with different colors (3pts). \n",
    "\n",
    "What do you qualitatively observe when the value of the regularization parameter changes (2pts)? \n",
    "\n",
    "4)(**3 pts**) Take the exponential of Y_train as the target, and fit the 2 regression models again. Report the best chosen **α** based on cross validation as well as the corresponding scoring metric. Compare the results of using the original target with the results of using the exponential of the target. What do you observe? \n",
    "\n",
    "5)(**5 pts**) Similarly, use [sklearn.linear_model.ElasticNet](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html) to do linear regression with different **α** values, and plot the coefficients learned for each of them (2pts). Observe the plot, then explain the pros and cons of ridge, lasso and Elastic Net models (3pts).\n",
    "\n",
    "\n",
    "6)(**5 pts**) Run the following three regression models with **MSE** loss on the training data: \n",
    "\n",
    "a. linear regression without regularization (1pts)\n",
    "\n",
    "b. linear regression with ridge regularization (2pts)\n",
    "\n",
    "c. linear regression with lasso regularization (2pts)\n",
    "\n",
    "For part (b) and (c), use only the best regularization parameters. Report the MSE and R<sup>2</sup> on the test data for each model.\n",
    "\n",
    "7)(**5 pts**) Train the 3 models and report the metrics with the original data without scaling (3pts). \n",
    "\n",
    "Why do we need to scale the data before regularization (2pts)? \n",
    "\n",
    "## Answer:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "pJwSM8ENCYWg"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import scale \n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.25, random_state = 50)\n",
    "\n",
    "X_train_scale = scale(X_train,axis=0,with_mean=True,with_std=True, copy = True)\n",
    "X_test_scale = scale(X_test,axis=0,with_mean=True,with_std=True, copy = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.52725374,  2.0917706 ,  1.61594354,  0.63150829,  1.72829095,\n",
       "         2.11370277,  0.90453403],\n",
       "       [ 0.74180896,  0.46308859, -0.9310778 , -0.35266047, -1.04140609,\n",
       "         0.29488827,  0.90453403],\n",
       "       [ 0.56726568,  0.13735218,  1.61594354,  0.63150829,  0.62041214,\n",
       "         0.26211684,  0.90453403],\n",
       "       [-0.39272239, -0.51412062, -0.08207069,  0.13942391,  0.62041214,\n",
       "        -0.80295471, -1.1055416 ],\n",
       "       [ 0.47999403,  0.78882499,  0.76693642,  1.12359267,  1.17435154,\n",
       "         1.11417408,  0.90453403]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_scale[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.linear_model import Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KFold(n_splits=5, random_state=50, shuffle=True)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha_values = 10**np.linspace(6,-6,100)\n",
    "\n",
    "n_cv = 5\n",
    "k = KFold(n_splits = n_cv, shuffle= True, random_state = 50)\n",
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.00000000e+06, 7.56463328e+05, 5.72236766e+05, 4.32876128e+05,\n",
       "       3.27454916e+05, 2.47707636e+05, 1.87381742e+05, 1.41747416e+05,\n",
       "       1.07226722e+05, 8.11130831e+04, 6.13590727e+04, 4.64158883e+04,\n",
       "       3.51119173e+04, 2.65608778e+04, 2.00923300e+04, 1.51991108e+04,\n",
       "       1.14975700e+04, 8.69749003e+03, 6.57933225e+03, 4.97702356e+03,\n",
       "       3.76493581e+03, 2.84803587e+03, 2.15443469e+03, 1.62975083e+03,\n",
       "       1.23284674e+03, 9.32603347e+02, 7.05480231e+02, 5.33669923e+02,\n",
       "       4.03701726e+02, 3.05385551e+02, 2.31012970e+02, 1.74752840e+02,\n",
       "       1.32194115e+02, 1.00000000e+02, 7.56463328e+01, 5.72236766e+01,\n",
       "       4.32876128e+01, 3.27454916e+01, 2.47707636e+01, 1.87381742e+01,\n",
       "       1.41747416e+01, 1.07226722e+01, 8.11130831e+00, 6.13590727e+00,\n",
       "       4.64158883e+00, 3.51119173e+00, 2.65608778e+00, 2.00923300e+00,\n",
       "       1.51991108e+00, 1.14975700e+00, 8.69749003e-01, 6.57933225e-01,\n",
       "       4.97702356e-01, 3.76493581e-01, 2.84803587e-01, 2.15443469e-01,\n",
       "       1.62975083e-01, 1.23284674e-01, 9.32603347e-02, 7.05480231e-02,\n",
       "       5.33669923e-02, 4.03701726e-02, 3.05385551e-02, 2.31012970e-02,\n",
       "       1.74752840e-02, 1.32194115e-02, 1.00000000e-02, 7.56463328e-03,\n",
       "       5.72236766e-03, 4.32876128e-03, 3.27454916e-03, 2.47707636e-03,\n",
       "       1.87381742e-03, 1.41747416e-03, 1.07226722e-03, 8.11130831e-04,\n",
       "       6.13590727e-04, 4.64158883e-04, 3.51119173e-04, 2.65608778e-04,\n",
       "       2.00923300e-04, 1.51991108e-04, 1.14975700e-04, 8.69749003e-05,\n",
       "       6.57933225e-05, 4.97702356e-05, 3.76493581e-05, 2.84803587e-05,\n",
       "       2.15443469e-05, 1.62975083e-05, 1.23284674e-05, 9.32603347e-06,\n",
       "       7.05480231e-06, 5.33669923e-06, 4.03701726e-06, 3.05385551e-06,\n",
       "       2.31012970e-06, 1.74752840e-06, 1.32194115e-06, 1.00000000e-06])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Ridge Regression, the suitable alpha value and the corresponding MSE value are:\n",
      "        alpha       MSE\n",
      "45  3.511192  0.004007\n",
      "For Lasso Regression, the suitable alpha value and the corresponding MSE value are:\n",
      "        alpha       MSE\n",
      "76  0.000614  0.004004\n"
     ]
    }
   ],
   "source": [
    "#Splitting training set into 5 folds, 4 folds are being used for training in each iteration \n",
    "#The fifth fold is being used for testing\n",
    "\n",
    "\n",
    "mean_ridge = []\n",
    "\n",
    "\n",
    "mean_lasso = []\n",
    "\n",
    "for a in alpha_values:\n",
    "    \n",
    "            ridge = Ridge(alpha = a)\n",
    "            lasso = Lasso(alpha = a)\n",
    "            mse_ridge = []\n",
    "            mse_lasso = []\n",
    "            for train_index, test_index in k.split(X_train_scale):\n",
    "                x_train, x_test = X_train_scale[train_index], X_train_scale[test_index]\n",
    "                y_train, y_test = Y_train.iloc[train_index], Y_train.iloc[test_index]\n",
    "\n",
    "                \n",
    "                ridge_fit = ridge.fit(x_train, y_train)\n",
    "                \n",
    "                \n",
    "                lasso_fit = lasso.fit(x_train, y_train)\n",
    "\n",
    "                mse_ridge.append(mean_squared_error(y_test, ridge_fit.predict(x_test)))\n",
    "                \n",
    "                mse_lasso.append(mean_squared_error(y_test, lasso_fit.predict(x_test)))\n",
    "\n",
    "\n",
    "            mean_ridge.append(np.average(mse_ridge))\n",
    "            \n",
    "            mean_lasso.append(np.average(mse_lasso))\n",
    "\n",
    "\n",
    "MSE_table_ridge = pd.DataFrame(zip(alpha_values, mean_ridge), columns = ['alpha','MSE'])\n",
    "MSE_table_lasso = pd.DataFrame(zip(alpha_values, mean_lasso), columns = ['alpha','MSE'])\n",
    "\n",
    "print(\"For Ridge Regression, the suitable alpha value and the corresponding MSE value are:\\n\", MSE_table_ridge[MSE_table_ridge['MSE'] == min(MSE_table_ridge['MSE'])])\n",
    "print(\"For Lasso Regression, the suitable alpha value and the corresponding MSE value are:\\n\", MSE_table_lasso[MSE_table_lasso['MSE'] == min(MSE_table_lasso['MSE'])])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import ElasticNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge_coeff=[]\n",
    "lasso_coeff=[]\n",
    "\n",
    "for a in alpha_values:\n",
    "    \n",
    "                ridge = Ridge(alpha = a)\n",
    "                ridge_fit = ridge.fit(X_train_scale, Y_train)\n",
    "                ridge_coeff.append(ridge.coef_)\n",
    "                \n",
    "                lasso = Lasso(alpha = a)\n",
    "                lasso_fit = lasso.fit(X_train_scale, Y_train)\n",
    "                lasso_coeff.append(lasso.coef_)\n",
    "                \n",
    "\n",
    "ridge_coeff_table = pd.DataFrame(data=ridge_coeff, index=alpha_values, columns=['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR', 'CGPA', 'Research'])\n",
    "lasso_coeff_table = pd.DataFrame(data=lasso_coeff, index=alpha_values, columns=['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR', 'CGPA', 'Research'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Lasso Regression Coefficients v/s Alpha'}, xlabel='alpha', ylabel='Coefficients'>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ridge_coeff_table.plot(title = 'Ridge Regression Coefficients v/s Alpha', xlabel = 'alpha', ylabel = 'Coefficients')\n",
    "\n",
    "lasso_coeff_table.plot(title = 'Lasso Regression Coefficients v/s Alpha', xlabel = 'alpha', ylabel = 'Coefficients')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**We can observe that the graphs are not clean when we take the absolute value of alpha. This is because the values of alpha has a huge time range. Taking log of alpha to get cleaner graphs.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Plotting cofficients v/s log of alpha:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>GRE_Score</th>\n",
       "      <th>TOEFL_Score</th>\n",
       "      <th>University_Rating</th>\n",
       "      <th>SOP</th>\n",
       "      <th>LOR</th>\n",
       "      <th>CGPA</th>\n",
       "      <th>Research</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>log_alpha</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6.000000</th>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.878788</th>\n",
       "      <td>756463.327555</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.757576</th>\n",
       "      <td>572236.765935</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.636364</th>\n",
       "      <td>432876.128108</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.515152</th>\n",
       "      <td>327454.916288</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.515152</th>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.025271</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003053</td>\n",
       "      <td>0.000729</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075736</td>\n",
       "      <td>0.006863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.636364</th>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.025271</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003053</td>\n",
       "      <td>0.000729</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075736</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.757576</th>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.025271</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003053</td>\n",
       "      <td>0.000729</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075736</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.878788</th>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003053</td>\n",
       "      <td>0.000729</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075736</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-6.000000</th>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.000730</td>\n",
       "      <td>0.021330</td>\n",
       "      <td>0.075736</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    alpha  GRE_Score  TOEFL_Score  University_Rating  \\\n",
       "log_alpha                                                              \n",
       " 6.000000  1000000.000000   0.000000     0.000000           0.000000   \n",
       " 5.878788   756463.327555   0.000000     0.000000           0.000000   \n",
       " 5.757576   572236.765935   0.000000     0.000000           0.000000   \n",
       " 5.636364   432876.128108   0.000000     0.000000           0.000000   \n",
       " 5.515152   327454.916288   0.000000     0.000000           0.000000   \n",
       "...                   ...        ...          ...                ...   \n",
       "-5.515152        0.000003   0.025271     0.014317           0.003053   \n",
       "-5.636364        0.000002   0.025271     0.014317           0.003053   \n",
       "-5.757576        0.000002   0.025271     0.014317           0.003053   \n",
       "-5.878788        0.000001   0.025272     0.014317           0.003053   \n",
       "-6.000000        0.000001   0.025272     0.014317           0.003054   \n",
       "\n",
       "                SOP       LOR      CGPA  Research  \n",
       "log_alpha                                          \n",
       " 6.000000  0.000000  0.000000  0.000000  0.000000  \n",
       " 5.878788  0.000000  0.000000  0.000000  0.000000  \n",
       " 5.757576  0.000000  0.000000  0.000000  0.000000  \n",
       " 5.636364  0.000000  0.000000  0.000000  0.000000  \n",
       " 5.515152  0.000000  0.000000  0.000000  0.000000  \n",
       "...             ...       ...       ...       ...  \n",
       "-5.515152  0.000729  0.021329  0.075736  0.006863  \n",
       "-5.636364  0.000729  0.021329  0.075736  0.006864  \n",
       "-5.757576  0.000729  0.021329  0.075736  0.006864  \n",
       "-5.878788  0.000729  0.021329  0.075736  0.006864  \n",
       "-6.000000  0.000730  0.021330  0.075736  0.006864  \n",
       "\n",
       "[100 rows x 8 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Since the graphs are not clear, we take the log of alpha and then plot the values:\n",
    "\n",
    "ridge_coeff_table.reset_index(inplace = True)\n",
    "ridge_coeff_table.rename(columns = {\"index\" : \"alpha\"}, inplace= True)\n",
    "\n",
    "ridge_coeff_table['log_alpha'] = np.log10(ridge_coeff_table['alpha'])\n",
    "ridge_coeff_table.set_index('log_alpha', inplace = True)\n",
    "ridge_coeff_table\n",
    "\n",
    "\n",
    "lasso_coeff_table.reset_index(inplace = True)\n",
    "lasso_coeff_table.rename(columns = {\"index\" : \"alpha\"}, inplace = True)\n",
    "\n",
    "lasso_coeff_table['log_alpha'] = np.log10(lasso_coeff_table['alpha'])\n",
    "lasso_coeff_table.set_index('log_alpha', inplace = True)\n",
    "lasso_coeff_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Lasso Regression Coefficients v/s Log of Alpha'}, xlabel='Log of Alpha', ylabel='Coefficients'>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "ridge_coeff_table[['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR', 'CGPA', 'Research']].plot(title = 'Ridge Regression Coefficients v/s Log of Alpha', xlabel = 'Log of Alpha', ylabel = 'Coefficients')\n",
    "\n",
    "lasso_coeff_table[['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR', 'CGPA', 'Research']].plot(title = 'Lasso Regression Coefficients v/s Log of Alpha', xlabel = 'Log of Alpha', ylabel = 'Coefficients')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**What do you qualitatively observe when the value of the regularization parameter changes (2pts)?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the regularization parameter is increased, optimization function will have to choose a smaller coffecient in order to minimize the total loss function. Thus, we can see in out charts for both Ridge Regression and Lasso Regression that the value of cofficients decrease as the value of alpha goes higher.\n",
    "\n",
    "Unlike ridge regression, as the penalty term increases, lasso sets more coefficients to zero. This means that the lasso estimator is a smaller model, with fewer predictors. Lasso acts as a feature selector and helps in reducing the complexity of a model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "exp_Y_train = np.exp(Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Ridge: the suitable alpha value is:\n",
      "        alpha       MSE\n",
      "45  3.511192  0.014384\n",
      "For Lasso: the suitable alpha value is:\n",
      "        alpha       MSE\n",
      "77  0.000464  0.014395\n"
     ]
    }
   ],
   "source": [
    "\n",
    "mean_ridge = []\n",
    "\n",
    "\n",
    "mean_lasso = []\n",
    "\n",
    "for a in alpha_values:\n",
    "    \n",
    "            mse_ridge = []\n",
    "            mse_lasso = []\n",
    "            \n",
    "            for train_index, test_index in k.split(X_train_scale):\n",
    "                x_train, x_test = X_train_scale[train_index], X_train_scale[test_index]\n",
    "                y_train, y_test = exp_Y_train.iloc[train_index], exp_Y_train.iloc[test_index]\n",
    "\n",
    "                ridge = Ridge(alpha = a)\n",
    "                ridge_fit = ridge.fit(x_train, y_train)\n",
    "                \n",
    "                lasso = Lasso(alpha = a)\n",
    "                lasso_fit = lasso.fit(x_train, y_train)\n",
    "\n",
    "                mse_ridge.append(mean_squared_error(y_test, ridge_fit.predict(x_test)))\n",
    "                \n",
    "                mse_lasso.append(mean_squared_error(y_test, lasso_fit.predict(x_test)))\n",
    "\n",
    "\n",
    "            mean_ridge.append(sum(mse_ridge)/len(mse_ridge))\n",
    "            \n",
    "            mean_lasso.append(sum(mse_lasso)/len(mse_lasso))\n",
    "\n",
    "\n",
    "MSE_table_ridge = pd.DataFrame(zip(alpha_values, mean_ridge), columns = ['alpha','MSE'])\n",
    "MSE_table_lasso = pd.DataFrame(zip(alpha_values, mean_lasso), columns = ['alpha','MSE'])\n",
    "\n",
    "print(\"For Ridge: the suitable alpha value is:\\n\", MSE_table_ridge[MSE_table_ridge['MSE'] == min(MSE_table_ridge['MSE'])])\n",
    "print(\"For Lasso: the suitable alpha value is:\\n\", MSE_table_lasso[MSE_table_lasso['MSE'] == min(MSE_table_lasso['MSE'])])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Compare the results of using the original target with the results of using the exponential of the target. What do you observe?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) It is observed that for Ridge Regression, alpha value remains constant for both exponential target and absolute target. However, the MSE for exponential target variable is higher as compared to the MSE of original target variable.\n",
    "\n",
    "2) For Lasso Regression, alpha value reduces and the MSE increases in exponential target as compared to the original target variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GRE_Score</th>\n",
       "      <th>TOEFL_Score</th>\n",
       "      <th>University_Rating</th>\n",
       "      <th>SOP</th>\n",
       "      <th>LOR</th>\n",
       "      <th>CGPA</th>\n",
       "      <th>Research</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000000.000000</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>756463.327555</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>572236.765935</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>432876.128108</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327454.916288</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.000003</th>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.000002</th>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.000002</th>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021330</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.000001</th>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021330</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.000001</th>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014318</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021330</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                GRE_Score  TOEFL_Score  University_Rating      SOP       LOR  \\\n",
       "1000000.000000   0.000000     0.000000           0.000000  0.00000  0.000000   \n",
       "756463.327555    0.000000     0.000000           0.000000  0.00000  0.000000   \n",
       "572236.765935    0.000000     0.000000           0.000000  0.00000  0.000000   \n",
       "432876.128108    0.000000     0.000000           0.000000  0.00000  0.000000   \n",
       "327454.916288    0.000000     0.000000           0.000000  0.00000  0.000000   \n",
       "...                   ...          ...                ...      ...       ...   \n",
       "0.000003         0.025272     0.014317           0.003054  0.00073  0.021329   \n",
       "0.000002         0.025272     0.014317           0.003054  0.00073  0.021329   \n",
       "0.000002         0.025272     0.014317           0.003054  0.00073  0.021330   \n",
       "0.000001         0.025272     0.014317           0.003054  0.00073  0.021330   \n",
       "0.000001         0.025272     0.014318           0.003054  0.00073  0.021330   \n",
       "\n",
       "                    CGPA  Research  \n",
       "1000000.000000  0.000000  0.000000  \n",
       "756463.327555   0.000000  0.000000  \n",
       "572236.765935   0.000000  0.000000  \n",
       "432876.128108   0.000000  0.000000  \n",
       "327454.916288   0.000000  0.000000  \n",
       "...                  ...       ...  \n",
       "0.000003        0.075735  0.006864  \n",
       "0.000002        0.075735  0.006864  \n",
       "0.000002        0.075735  0.006864  \n",
       "0.000001        0.075735  0.006865  \n",
       "0.000001        0.075735  0.006865  \n",
       "\n",
       "[100 rows x 7 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import ElasticNet\n",
    "\n",
    "elastic_lm_coeff=[]\n",
    "\n",
    "\n",
    "for a in alpha_values:\n",
    "    \n",
    "                elastic_lm = ElasticNet(alpha = a)\n",
    "                elastic_lm_fit = elastic_lm.fit(X_train_scale, Y_train)\n",
    "                elastic_lm_coeff.append(elastic_lm.coef_)\n",
    "                \n",
    "                \n",
    "                \n",
    "\n",
    "elastic_lm_coeff_table = pd.DataFrame(data=elastic_lm_coeff, index=alpha_values, columns=['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR', 'CGPA', 'Research'])\n",
    "elastic_lm_coeff_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>GRE_Score</th>\n",
       "      <th>TOEFL_Score</th>\n",
       "      <th>University_Rating</th>\n",
       "      <th>SOP</th>\n",
       "      <th>LOR</th>\n",
       "      <th>CGPA</th>\n",
       "      <th>Research</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>log_alpha</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6.000000</th>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.878788</th>\n",
       "      <td>756463.327555</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.757576</th>\n",
       "      <td>572236.765935</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.636364</th>\n",
       "      <td>432876.128108</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.515152</th>\n",
       "      <td>327454.916288</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.515152</th>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.636364</th>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.757576</th>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021330</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-5.878788</th>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014317</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021330</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-6.000000</th>\n",
       "      <td>0.000001</td>\n",
       "      <td>0.025272</td>\n",
       "      <td>0.014318</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.00073</td>\n",
       "      <td>0.021330</td>\n",
       "      <td>0.075735</td>\n",
       "      <td>0.006865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    alpha  GRE_Score  TOEFL_Score  University_Rating      SOP  \\\n",
       "log_alpha                                                                       \n",
       " 6.000000  1000000.000000   0.000000     0.000000           0.000000  0.00000   \n",
       " 5.878788   756463.327555   0.000000     0.000000           0.000000  0.00000   \n",
       " 5.757576   572236.765935   0.000000     0.000000           0.000000  0.00000   \n",
       " 5.636364   432876.128108   0.000000     0.000000           0.000000  0.00000   \n",
       " 5.515152   327454.916288   0.000000     0.000000           0.000000  0.00000   \n",
       "...                   ...        ...          ...                ...      ...   \n",
       "-5.515152        0.000003   0.025272     0.014317           0.003054  0.00073   \n",
       "-5.636364        0.000002   0.025272     0.014317           0.003054  0.00073   \n",
       "-5.757576        0.000002   0.025272     0.014317           0.003054  0.00073   \n",
       "-5.878788        0.000001   0.025272     0.014317           0.003054  0.00073   \n",
       "-6.000000        0.000001   0.025272     0.014318           0.003054  0.00073   \n",
       "\n",
       "                LOR      CGPA  Research  \n",
       "log_alpha                                \n",
       " 6.000000  0.000000  0.000000  0.000000  \n",
       " 5.878788  0.000000  0.000000  0.000000  \n",
       " 5.757576  0.000000  0.000000  0.000000  \n",
       " 5.636364  0.000000  0.000000  0.000000  \n",
       " 5.515152  0.000000  0.000000  0.000000  \n",
       "...             ...       ...       ...  \n",
       "-5.515152  0.021329  0.075735  0.006864  \n",
       "-5.636364  0.021329  0.075735  0.006864  \n",
       "-5.757576  0.021330  0.075735  0.006864  \n",
       "-5.878788  0.021330  0.075735  0.006865  \n",
       "-6.000000  0.021330  0.075735  0.006865  \n",
       "\n",
       "[100 rows x 8 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elastic_lm_coeff_table.reset_index(inplace = True)\n",
    "elastic_lm_coeff_table.rename(columns = {\"index\" : \"alpha\"}, inplace= True)\n",
    "\n",
    "elastic_lm_coeff_table['log_alpha'] = np.log10(elastic_lm_coeff_table['alpha'])\n",
    "elastic_lm_coeff_table.set_index('log_alpha', inplace = True)\n",
    "elastic_lm_coeff_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Linear Regression Coefficients v/s Log of Alpha'}, xlabel='log of alpha', ylabel='Coefficients'>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "elastic_lm_coeff_table[['GRE_Score', 'TOEFL_Score', 'University_Rating', 'SOP', 'LOR', 'CGPA', 'Research']].plot(title = 'Linear Regression Coefficients v/s Log of Alpha', xlabel = 'log of alpha', ylabel = 'Coefficients')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observe the plot, then explain the pros and cons of ridge, lasso and Elastic Net models (3pts).**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ridge Regression:**\n",
    "\n",
    "Pros:\n",
    "\n",
    "1) It helps to reduce the complexity of the model as compared to unregularized Linear Regression by pushing some coefficients close to 0.\n",
    "\n",
    "2) It helps to avoid the problem of overfitting\n",
    "\n",
    "\n",
    "Cons:\n",
    "\n",
    "1) It makes the model less interpretable\n",
    "\n",
    "2) It also increases the bias of the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Lasso Regression:**\n",
    "\n",
    "Pros:\n",
    "\n",
    "1) Lasso Regression helps in selecting features by shrinking unnecessary coefficients to 0.\n",
    "\n",
    "2) It helps in reducing the complexity of the model and thereby avoid overfitting.\n",
    "\n",
    "\n",
    "Cons:\n",
    "\n",
    "1) It makes the model biased\n",
    "\n",
    "2) For a group of correlated variables, feauture selection can be arbitrary.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Elastic Net:**\n",
    "\n",
    "Pros:\n",
    "\n",
    "1) It helps to reduce the complexity of the model as compared to Linear Regression.\n",
    "\n",
    "2) It helps to avoid the problem of overfitting\n",
    "\n",
    "3) It works well for highly correlated predictors\n",
    "\n",
    "Cons:\n",
    "\n",
    "1) It makes the model biased\n",
    "\n",
    "\n",
    "2) It has high computational cost\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**a. Linear Regression without Regularization**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Linear Model, the MSE on train data is:  0.00386 and MSE and R2 for test data is:  0.0052 & 0.69103\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "LR = LinearRegression()\n",
    "LR_fit = LR.fit(X_train_scale, Y_train)\n",
    "mse_lr_train = mean_squared_error(Y_train, LR_fit.predict(X_train_scale))\n",
    "mse_lr_test =  mean_squared_error(Y_test, LR_fit.predict(X_test_scale))\n",
    "r2_score_lm = r2_score(Y_test, LR_fit.predict(X_test_scale))\n",
    "                                  \n",
    "\n",
    "print(\"For Linear Model, the MSE on train data is: \", round(mse_lr_train,5), \"and MSE and R2 for test data is: \",round(mse_lr_test,5), \"&\", round(r2_score_lm,5))  \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**b. Linear Regression with Ridge Regularization**\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Ridge Model, the MSE on train data is:  0.00386 and MSE and R2 for test data is:  0.00516 & 0.69355\n"
     ]
    }
   ],
   "source": [
    "ridge = Ridge(alpha = 3.511192)\n",
    "ridge_fit = ridge.fit(X_train_scale, Y_train)\n",
    "mse_ridge_train = mean_squared_error(Y_train, ridge_fit.predict(X_train_scale))\n",
    "mse_ridge_test =  mean_squared_error(Y_test, ridge_fit.predict(X_test_scale))               \n",
    "r2_score_ridge= r2_score(Y_test, ridge_fit.predict(X_test_scale))\n",
    "\n",
    "print(\"For Ridge Model, the MSE on train data is: \", round(mse_ridge_train,5), \"and MSE and R2 for test data is: \",round(mse_ridge_test,5), \"&\", round(r2_score_ridge,5))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**c. Linear Regression with Lasso Regularization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Lasso Model, the MSE on train data is:  0.00386 and MSE and R2 for test data is:  0.00518 & 0.6921\n"
     ]
    }
   ],
   "source": [
    "lasso = Lasso(alpha = 0.000614)\n",
    "lasso_fit = lasso.fit(X_train_scale, Y_train)\n",
    "mse_lasso_train = mean_squared_error(Y_train, lasso_fit.predict(X_train_scale))\n",
    "mse_lasso_test =  mean_squared_error(Y_test, lasso_fit.predict(X_test_scale))  \n",
    "r2_score_lasso = r2_score(Y_test, lasso_fit.predict(X_test_scale))\n",
    "\n",
    "print(\"For Lasso Model, the MSE on train data is: \", round(mse_lasso_train,5), \"and MSE and R2 for test data is: \",round(mse_lasso_test,5), \"&\", round(r2_score_lasso,5))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### (7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Linear Model, the MSE on train data is:  0.00386 and MSE and R2 for test data is:  0.00453 & 0.73107\n",
      "For Ridge Model, the MSE on train data is:  0.00388 and MSE and R2 for test data is:  0.00452 & 0.73166\n",
      "For Lasso Model, the MSE on train data is:  0.00386 and MSE and R2 for test data is:  0.00455 & 0.72939\n"
     ]
    }
   ],
   "source": [
    "LR = LinearRegression()\n",
    "LR_fit = LR.fit(X_train, Y_train)\n",
    "mse_lr_train = mean_squared_error(Y_train, LR_fit.predict(X_train))\n",
    "mse_lr_test =  mean_squared_error(Y_test, LR_fit.predict(X_test))\n",
    "r2_score_lm = r2_score(Y_test, LR_fit.predict(X_test))\n",
    "                                  \n",
    "ridge = Ridge(alpha = 3.511192)\n",
    "ridge_fit = ridge.fit(X_train, Y_train)\n",
    "mse_ridge_train = mean_squared_error(Y_train, ridge_fit.predict(X_train))\n",
    "mse_ridge_test =  mean_squared_error(Y_test, ridge_fit.predict(X_test))               \n",
    "r2_score_ridge= r2_score(Y_test, ridge_fit.predict(X_test))\n",
    "\n",
    "lasso = Lasso(alpha = 0.000614)\n",
    "lasso_fit = lasso.fit(X_train, Y_train)\n",
    "mse_lasso_train = mean_squared_error(Y_train, lasso_fit.predict(X_train))\n",
    "mse_lasso_test =  mean_squared_error(Y_test, lasso_fit.predict(X_test))  \n",
    "r2_score_lasso = r2_score(Y_test, lasso_fit.predict(X_test))\n",
    "\n",
    "print(\"For Linear Model, the MSE on train data is: \", round(mse_lr_train,5), \"and MSE and R2 for test data is: \",round(mse_lr_test,5), \"&\", round(r2_score_lm,5))  \n",
    "print(\"For Ridge Model, the MSE on train data is: \", round(mse_ridge_train,5), \"and MSE and R2 for test data is: \",round(mse_ridge_test,5), \"&\", round(r2_score_ridge,5))  \n",
    "print(\"For Lasso Model, the MSE on train data is: \", round(mse_lasso_train,5), \"and MSE and R2 for test data is: \",round(mse_lasso_test,5), \"&\", round(r2_score_lasso,5))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Why do we need to scale the data before regularization (2pts)?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The reason to normalise the data before regularization is to ensure that the regularisation term 𝜆 regularises/affects the variable involved in a similar manner.  The penalty on particular coefficients in regularized linear regression techniques depends largely on the scale associated with the features. When one feature is on a small range, say from 0 to 10, and another is on a large range, say from 0 to 1,000,000, applying regularization is going to unfairly punish the feature with the small range. Scaling of the variables is done to avoid this unequal penalization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "MIS 382N - HW1.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
